
puts "这个seed会自动建立1个admin账号, 10个user账号, 7个 Chapters，和相应的小节 Posts, 10个admin创建的questions，10个user创建的questions，"

# Create Admin Account, Email Confirmed.
User.create([username: "admin", email: "admin@gmail.com", password: "123456", password_confirmation: "123456", is_admin: "true", confirmed_at: Date.today])
puts "Admin account created. Email Confirmed."

# Create Account, Email Confirmed.
for i in 1..5 do
  User.create([username: "user#{i}", email: "user#{i}@gmail.com", password: "123456", password_confirmation: "123456", confirmed_at: Date.today])

end
puts "5 User accounts created. Email Confirmed."

# Create Account, Email Unconfirmed.
for i in 6..10 do
  User.create([username: "user#{i}", email: "user#{i}@gmail.com", password: "123456", password_confirmation: "123456"])

end
puts "5 User accounts created. Email Unconfirmed."

# Create Course

Course.create([title: "Rails 基础环境建设", one_sentence_summary: "准备必要的工具和软件，配置 Rails 开发环境", teacher_name: "xdite", faq: "### 我没有基础可以上这个课吗？\r\n\r\n\r\n可以。本教材是由具备丰富的经验，辅导过许多无计算机背景的学生成为职业 Rails 全栈工程师编写。编程最重要的是耐心以及积极，本科计算机知识不是必须项。不过因为课程需要阅读大量英文文档，所以我们要求您要有一定的英语水准（大学英语四级及以上）。\r\n\r\n---\r\n\r\n### 遇到问题不会做怎么办？\r\n\r\n\r\n深呼吸～身为一个（未来的）职业程序员，遇到bug是很正常的事，仔细看看error的内容（其实就是英文），通常它会告诉你哪一步错了、少了什么，需要怎么做。真的无法解决，就拍照上slack询问吧。我们有线上助教会为您解答问题。\r\n\r\n---\r\n\r\n### 学到一半不想学了会退费吗？\r\n\r\n抱歉，线上课程一旦出售就不会退费哦。\r\n\r\n 在下单前请慎重思考三件事：\r\n \r\n* 我是否愿意牺牲其他时间来用于学习编程？\r\n \r\n* 我是否有强烈学会编程的欲望？\r\n \r\n* 我是否能为自己的选择负责？\r\n \r\n \r\n 以上答案均为是，那么请放心下单。\r\n \r\n ---\r\n \r\n ### 其他问题\r\n \r\n 请发送至邮箱xxx@xxx.com", is_hidden: false, price: 100])
puts "1st Course created."

Course.create([title: "Rails 初级教程", one_sentence_summary: "在5小时搭建投票网站的过程中让你不知不觉地掌握 Rails 基础知识", teacher_name: "xdite", is_hidden: false, price: 1000])
puts "2nd Course created."

Course.create([title: "出发前的热身，重复重复再重复", one_sentence_summary: "速度和压力练习，训练你在10小时之内做出 KnewOne 剁手网站", teacher_name: "xdite", is_hidden: false, price: 1000])
puts "3rd Course created."

Course.create([title: "游戏，但这不是游戏", one_sentence_summary: "完整的网页端多人合作游戏开发 - 没热身的请绕道", teacher_name: "xdite", is_hidden: false, price: 2000])
puts "4th Course created."

Course.create([title: "速度的极限和极限的速度", one_sentence_summary: "搭建直播平台，训练解决复杂网络环境下网速问题的能力", teacher_name: "xdite", is_hidden: false, price: 2000])
puts "5th Course created."

# Create 1st Course Contents
# Create Chapter
Chapter.create([chapter: "第一章 开始之前", course_id: 1])
puts "生成第一章"

# Create Post
Post.create([course_id: 1, chapter_id: 1, title: "购买电脑（Mac 电脑）", article: "## 购买电脑（Mac 电脑）\r\n\r\n因为这个课程使用的基础设备是 Mac 电脑。所以接下来的整个教程都是以 Mac 为基础的教学课程。\r\n\r\n所以请在开学之前，确保你自己已经购买了一台 Mac 电脑，并且把 Rails 开发环境搭建完毕。\r\n\r\n---\r\n\r\n### Mac 电脑的最低需求\r\n为了确保开发过程的流畅。我们建议你购买以下的电脑配置\r\n*  2014年以后出厂的 Macbook Air/Macbook Pro\r\n*  屏幕限制 13\"以上，最好是 15\"+\r\n*  内存限制 8GB 以上，最好是 16GB\r\n*  操作系统限制 OSX 10.10 以上，最好是 10.11\r\n\r\n", is_hidden: false])
puts "生成第一章第 1 节"

Task.create([course_id: 1, post_id: 1, due_time: Time.zone.now + 1.month, description: "请把你的电脑型号贴在这里\r\n\r\n\r\n\r\n请将你的电脑规格截图贴上来\r\n\r\n点击选择左上角苹果图案，选择第一项 “关于这台电脑”\r\n\r\n将你的电脑规格截图（ command + shift + 4 ，选取画面，截图会自动存在您的桌面上）\r\n\r\n将图片拖曳到回答栏位，即可上传图片"])
puts "生成作业 - 第一章第 1 节"

Post.create([course_id: 1, chapter_id: 1, title: "加入课程 Slack 频道（学会翻墙交流技能）", article: "## 加入课程 Slack 频道（学会翻墙交流技能）\r\n这个课程的官方交流频道在 Slack 上：\r\n* 请各位同学到 https://growthschool-slack.herokuapp.com/ 上注册一个 slack 账号。\r\n* 加入 channel：#rails-fullstack-1\r\n\r\n### Slack\r\n![](http://imageshack.com/a/img922/9831/dLTfz0.png)\r\n[slack](https://slack.com) 是一套即时通讯系统。台湾地区敏捷团队多半使用此套即时通讯系统，作为团队内部的信息交流使用。我们在这套课程里，也会使用这一套工具交流学习以及协作开发。\r\n\r\n### Slack 被挡了怎么办？（Only for 大陆学员）\r\n程序员寻找的很多资源都在墙以外的世界。你可以使用\r\n\r\n* [云梯](https://yuntidata.com/)\r\n\r\n之类的服务，翻墙出去，这样就可以使用 Slack App了。\r\n", is_hidden: false])
puts "生成第一章第 2 节"

Task.create([course_id: 1, post_id: 2, due_time: Time.zone.now + 1.month, description: "\r\n这个课程官方交流频道在 Slack 上：\r\n\r\n* 请各位同学到 [https://growthschool-slack.herokuapp.com/](https://growthschool-slack.herokuapp.com/) 上注册一个 slack 账号\r\n\r\n- 加入 channel ：#rails-fullstack-1 和 #rails-newbie\r\n\r\n并在这里缴交你的 slack id 与真名"])
puts "生成作业 - 第一章第 2 节"

# Create Chapter

Chapter.create([chapter: "第二章 安装开发环境", course_id: 1])
puts "生成第二章"

Post.create([course_id: 1, chapter_id: 2, title: "确认操作系统", article: "## 确认操作系统\r\n请确认您的 Mac 操作系统是 10.10（Yosemite）以上\r\n\r\n![](http://imageshack.com/a/img921/2962/4TiK2e.png)\r\n\r\n![](http://imageshack.com/a/img922/1942/RYCC45.png)\r\n\r\n", is_hidden: false])
puts "生成第二章第 1 节"

Post.create([course_id: 1, chapter_id: 2, title: "安装 Xcode", article: "## 安装 Xcode\r\n\r\n![](http://imageshack.com/a/img924/4168/fmGknS.png)\r\n\r\n找到 Xcode 并点击安装\r\n\r\n![](http://imageshack.com/a/img921/4756/B3qJtd.png)\r\n\r\n#### 首次执行，同意协议\r\n\r\n安装过程大约需要2~3小时，安装时间可能会受到您的网路速度的影响。\r\n\r\n\r\n\r\n安装 Xcode 完毕，在桌面左下角找到 Launchpad，并点击打开\r\n\r\n![](http://imageshack.com/a/img922/8080/esf9mZ.png)\r\n\r\n\r\n\r\n找到 Xcode，并打开执行\r\n\r\n![](http://imageshack.com/a/img924/7701/6ggS6N.png)\r\n\r\n\r\n\r\n首次执行， Xcode会要求同意”使用者协议“，选择 Agree\r\n\r\n![](http://imageshack.com/a/img924/361/yaJHST.png)\r\n\r\n\r\n\r\n若 Xcode 要求执行权限，请输入您的电脑开机密码，并同意。\r\n\r\n![](http://imageshack.com/a/img921/6753/7YWGuI.png)\r\n\r\n", is_hidden: false])
puts "生成第二章第 2 节"

Task.create([course_id: 1, post_id: 4, due_time: Time.zone.now + 1.month, description: "\r\n安装完成后请输入 “ok”\r\n\r\n点击选择 Submit"])
puts "生成作业 - 第二章第 2 节"

Post.create([course_id: 1, chapter_id: 2, title: "确认安装 Command Line Tools", article: "## 确认安装 Command Line Tools\r\n\r\n到 Mac 的 Spotlight\r\n\r\n![](http://imageshack.com/a/img924/6691/3NIOt3.png)\r\n\r\n搜索 Terminal\r\n\r\n![](http://imageshack.com/a/img921/1157/BY3ZwP.png)\r\n\r\n打开你的 “Terminal” 程式。（以后我们都会透过这个程式来输入程序指令）\r\n\r\n\r\n\r\n##### 在窗口里输入指令：\r\n\r\n`xcode-select --install`\r\n\r\n它将会安装 command line tools（这是安装 Ruby 所需要的 Library）\r\n\r\n执行后会出现这个窗口，点击“安装”这个按钮进行安装。\r\n\r\n![](http://imageshack.com/a/img921/5334/XG7pwF.png)\r\n\r\n\r\n\r\n### 如何确定是否已经安装好？\r\n\r\n***\r\n\r\n在 Terminal 窗口中输入：\r\n\r\n`xcode-select -p`\r\n\r\n显示出：/Library/Developer/CommandLineTools\r\n\r\n即表示已经安装成功！", is_hidden: false])
puts "生成第二章第 3 节"

Post.create([course_id: 1, chapter_id: 2, title: "确认安装 Homebrew", article: "## 确认安装 Homebrew\r\n\r\n#### Homebrew 简介\r\n\r\n***\r\n\r\nHomebrew 是开发者社群专门为 MacOSX 打造的第三方套件管理程式，比如说安装 Ruby 需要一些编译工具或函式库，这些工具或函式库，可以从 Homebrew 取得。\r\n\r\nHomebrew 的官方网址是：http://brew.sh/index_zh-tw.html\r\n\r\n![](http://imageshack.com/a/img923/3668/8x9ASa.png)\r\n\r\n\r\n\r\n#### 如何安装 Homebrew ？\r\n\r\n***\r\n\r\n在终端机输入：（若以下指令失效，可以到官方网址查看最新版）\r\n\r\n`/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"`\r\n\r\n\r\n\r\n发现在使用 Homebrew 之前，需要先同意 Xcode 的使用者规范\r\n\r\n![](http://imageshack.com/a/img921/1339/FMiH4B.png)\r\n\r\n输入：`sudo xcodebuild -license`  同意。\r\n\r\n* 中间会出现很多条文，一直按 “空白键” 拖到最下页，然后输入 agree 同意。", is_hidden: false])
puts "生成第二章第 4 节"

Task.create([course_id: 1, post_id: 6, due_time: Time.zone.now + 1.month, description: "安装完成后请输入 “ok”\r\n\r\n点击选择 Submit"])
puts "生成作业 - 第二章第 4 节"

Post.create([course_id: 1, chapter_id: 2, title: "在 Homebrew 安装 git", article: "## 在 Homebrew 安装 git\r\n\r\n#### Git 简介\r\n\r\n***\r\n\r\nGit 是目前最流行的原始码控制软件。你可以把 Git 想象成是程式码的时光备份机器。\r\n\r\n\r\n\r\n#### 安装 Git\r\n\r\n***\r\n\r\n使用 Homebrew 安装 Git\r\n\r\n在 Terminal 窗口中输入：\r\n\r\n`brew install git`\r\n\r\n", is_hidden: false])
puts "生成第二章第 5 节"

Task.create([course_id: 1, post_id: 7, due_time: Time.zone.now + 1.month, description: "\r\n请输入\r\n\r\ngit —version\r\n\r\n贴出你的 git 版本号"])
puts "生成作业 - 第二章第 5 节"

Post.create([course_id: 1, chapter_id: 2, title: "安装 ImageMagick", article: "## 安装 ImageMagick\r\n\r\n#### ImageMagick 简介\r\n\r\n***\r\n\r\nImageMagick 是专门处理图片的函式库。以后我们在用 Ruby 的时候会常常需要使用 ImageMagick 相关的功能，所以通常在初期配置环境时，我们也会安装ImageMagick。\r\n\r\n\r\n\r\n#### 安装 ImageMagick\r\n\r\n***\r\n\r\n`brew install imagemagick`\r\n\r\n", is_hidden: false])
puts "生成第二章第 6 节"

Post.create([course_id: 1, chapter_id: 2, title: "安装 PostgresSQL", article: "## 安装 PostgresSQL\r\n\r\n#### PostgresSQL 简介\r\n\r\n***\r\n\r\nPostgresSQL 是一套强大的资料库。许多网站开发预设使用 PostgresSQL 作为底层资料库。在初期配置环境时，我们也会安装 PostgresSQL。\r\n\r\n\r\n\r\n#### 安装 PostgresSQL\r\n\r\n***\r\n\r\n`brew install postgresql`\r\n\r\n安装完毕后：\r\n\r\n`brew services start postgresql` （确保在你下次开机时，也会一起启动资料库）\r\n\r\n", is_hidden: false])
puts "生成第二章第 7 节"

Task.create([course_id: 1, post_id: 9, due_time: Time.zone.now + 1.month, description: "请输入 postgres -V\r\n\r\n贴出你的版本号"])
puts "生成作业 - 第二章第 7 节"

Post.create([course_id: 1, chapter_id: 2, title: "确认安装 RVM", article: "## 确认安装 RVM\r\n\r\n#### RVM 简介\r\n\r\n***\r\n\r\n在 Mac 开发 Ruby on Rails 程式时，因为 Ruby 版本更新很快，常常会遇到一些版本与权限上的问题。所以，在开发时，我们通常不会使用系统内建的 Ruby。而是会采用一套 Ruby Version Manager 去管理 Ruby 的安装与升级。透过 Ruby Version Manager（RVM）去安装 Ruby。\r\n\r\n\r\n\r\n#### 安装 RVM\r\n\r\n***\r\n\r\nRVM 的官方网址是 [http://rvm.io](http://rvm.io/)\r\n\r\n官方网站提供的安装指令是：\r\n\r\n`\\curl -L https://get.rvm.io | bash -s stable`\r\n\r\n安装完输入：\r\n\r\n`source ~/.rvm/scripts/rvm`\r\n\r\n让 ram 生效。\r\n\r\n然后安装一个套件\r\n\r\n`brew install libxml2`\r\n\r\n\r\n\r\n", is_hidden: false])
puts "生成第二章第 8 节"

Post.create([course_id: 1, chapter_id: 2, title: "确认安装 Ruby", article: "## 确认安装 Ruby\r\n\r\n#### 安装 Ruby\r\n\r\n***\r\n\r\n`rvm install 2.3.1` <== 尾端可选择自己需要的版本 EX: 1.9.3 , 2.1.2 ... etc\r\n\r\n`rvm use 2.3.1 --default` 使用 ruby 2.3.1 为预设版本 (可改成自己需要的版本)\r\n\r\n安装完以后记得重开 terminal。\r\n\r\n`rvm list` 列出目前已安装的 Ruby 版本。\r\n\r\n\r\n\r\n#### 指定 RubyGems 来源（参考：如果你人在大陆，无法连上时再使用这个方法）\r\n\r\n***\r\n\r\n如果遇到不太连得上  [https://rubygems.org](https://rubygems.org/) 的时候，可以多执行一行指令：\r\n\r\n`gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/`", is_hidden: false])
puts "生成第二章第 9 节"

Task.create([course_id: 1, post_id: 11, due_time: Time.zone.now + 1.month, description: "请输入 ruby -v 并贴出版本号"])
puts "生成作业 - 第二章第 9 节"

Post.create([course_id: 1, chapter_id: 2, title: "确认安装 Rails", article: "## 确认安装 Rails\r\n\r\n#### 安装 Rails\r\n\r\n***\r\n\r\n（建议你在连上 vpn 的状态下操作。因为墙会挡掉 rubygems.org 的）\r\n\r\n`gem install rails -v 5.0.0`\r\n\r\n后面的参数是指定版本，预设会抓取最新的版本\r\n\r\n", is_hidden: false])
puts "生成第二章第 10 节"

Task.create([course_id: 1, post_id: 12, due_time: Time.zone.now + 1.month, description: "请输入 rails -v 并贴出版本号"])
puts "生成作业 - 第二章第 10 节"

# Create Chapter

Chapter.create([chapter: "第三章 设置 编辑器 & Terminal & Shell", course_id: 1])
puts "生成第三章"

Post.create([course_id: 1, chapter_id: 3, title: "Atom / Sublime", article: "## Atom / Sublime\r\n\r\n在编程的时候，除了需要输入指令之外，我们还需要能够编辑程序的软件。\r\n\r\n目前市面上有许多不同的 Rails 编辑器，\r\n\r\n在这里我们推荐给新手的有两款，可以选择其中一款来安装：\r\n\r\n#### Atom\r\n\r\n***\r\n\r\n这款是由 Github 维护的 [http://atom.io](http://atom.io/)\r\n\r\n![](http://imageshack.com/a/img923/5331/Fx934a.png)\r\n\r\n下载后，解压，将 atom 拖拉到 “应用程式” 即可。\r\n\r\n\r\n\r\n#### Sublime\r\n\r\n***\r\n\r\n这款是独立开发者所维护的 [https://www.sublimetext.com/](https://www.sublimetext.com/)\r\n\r\n下载后，双击 Sublime 打开 dmg\r\n\r\n![](http://imageshack.com/a/img922/5600/j4dgCs.png)\r\n\r\n\r\n\r\n将 Sublime 拖到应用程式即可\r\n\r\n![](http://imageshack.com/a/img923/1760/aLaZq1.png)", is_hidden: false])
puts "生成第三章第 1 节"

Post.create([course_id: 1, chapter_id: 3, title: "设定在 Terminal 内可以打开 Atom 与 Sublime", article: "## 设定在 Terminal 内可以打开 Atom 与 Sublime\r\n\r\n如何在 Terminal 内可以 “用惯用的编辑器” 快速打开 “目前正在做” 的专案（project）呢？\r\n\r\n这个功能叫 Shell commands 。这个功能可以帮助你在最短的时间内，开启正在执行的项目程序码档案。\r\n\r\nAtom 内开启这个功能的选项，在左上角的下拉选单里：\r\n\r\n#### Atom 版本\r\n\r\n***\r\n\r\n![](http://imageshack.com/a/img924/3503/f6C7QS.png)\r\n\r\n\r\n\r\n#### Sublime 版本\r\n\r\n***\r\n\r\n`sudo ln -s \"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\" /usr/local/bin/subl`\r\n\r\n（需要输入密码）\r\n\r\n以后当我们在制作一个新的专案（project）的时候，就可以透过在 Terminal 输入指令，让 Atom 或 Sublime 自动打开相对应的资料夹。", is_hidden: false])
puts "生成第三章第 2 节"

# Create Chapter

Chapter.create([chapter: "第四章 体验 Rails", course_id: 1])
puts "生成第四章"

Post.create([course_id: 1, chapter_id: 4, title: "体验：建立一个 Rails 专案", article: "## 体验：建立一个 Rails 专案\r\n\r\n前面章节的安装步骤做完后，我们就已经可以建立一个 Rails 专案并操作。由于只用 Mac 原始内建的工具来开发，所以非常的一般，使用起来不是很方便。\r\n\r\n本章的目的是让您可以马上体验建立一个 Rails 专案并且可以在浏览器上打开操作。\r\n\r\n（建议你在连上 vpn 的状态下操作。因为墙会挡掉 rubygems.org 的）\r\n\r\n我们仍然需要后面的步骤把开发工具跟第三方服务安装完，才能帮助您使用更方便、快速、有效的方式开发。\r\n\r\n#### 开启终端机，建立一个新的 Rails 专案\r\n\r\n***\r\n\r\n![](http://imageshack.com/a/img922/9268/VeNthi.png)\r\n\r\n\r\n\r\n输入 `ruby -v`, `rails -v` 确认版本\r\n\r\n![](http://imageshack.com/a/img922/3820/GK1K6b.png)\r\n\r\n\r\n\r\n输入 `rails new first_app` 建立一个新的 rails 专案。\r\n\r\n![](http://imageshack.com/a/img921/7919/nvQYyO.png)\r\n\r\n\r\n\r\n……（中间会跑很多信息）\r\n\r\n![](http://imageshack.com/a/img923/5909/H8CMGQ.png)\r\n\r\n\r\n\r\n（如果中间卡住）\r\n\r\n***\r\n\r\n大陆的朋友，如果中间卡住，请打开 ffirst_app 下的 `Gemfile`，将  `https://rubygems.org`  改成 `http://ruby.taobao.org`\r\n\r\n然后在 `first_app` 下跑 `bundle install`。\r\n\r\n一个新的 Rails 专案就建立完成了！\r\n\r\n", is_hidden: false])
puts "生成第四章第 1 节"

Post.create([course_id: 1, chapter_id: 4, title: "进入 Rails 专案，并执行 server 环境运作", article: "## 进入 Rails 专案，并执行 server 环境运作\r\n\r\n输入 `cd first_app` 进入刚建立好的资料夹\r\n\r\n可以输入 `pwd` 确认所在的位置路径，以及输入 `ls` 确认目前资料夹的內容\r\n\r\n![](http://imageshack.com/a/img922/8496/xK1WzV.png)\r\n\r\n\r\n\r\n输入  `rails s` 即可启动 server 模式\r\n\r\n![](http://imageshack.com/a/img923/3534/QTzHlb.png)\r\n\r\n\r\n\r\n前往 [http://localhost:3000/](http://localhost:3000/) 即可进入 Rails 的画面\r\n\r\n![](http://imageshack.com/a/img923/7372/MkxYz7.png)\r\n\r\n", is_hidden: false])
puts "生成第四章第 2 节"

Post.create([course_id: 1, chapter_id: 4, title: "建立一个简单的留言板功能", article: "## 建立一个简单的留言板功能\r\n\r\n这只是个刚建好的空专案，我们可以加点功能来体验 Rails 的开发\r\n\r\n首先，再开一个新的终端机窗口（快捷键： ⌘ + N）\r\n\r\n* `cd first_app` 进入到 first_app 的资料夹\r\n\r\n\r\n* `ls`  确认目前资料夹位置的档案结构\r\n\r\n![](http://imageshack.com/a/img924/7452/rYvRKZ.png)\r\n\r\n这时候会有两个窗口，一个放着跑 rails s，一个继续做指令操作来开发。到做开发的窗口下输入：\r\n\r\n`rails g scaffold topic title:string description:text`\r\n\r\n![](http://imageshack.com/a/img924/2668/MZ1rkb.png)\r\n\r\n跑 `rake db:migrate`\r\n\r\n![](http://imageshack.com/a/img924/9233/JHbLgN.png)\r\n\r\n\r\n\r\n#### 体验刚建好的留言板功能\r\n\r\n***\r\n\r\n前往 [http://localhost:3000/topics](http://localhost:3000/topics)\r\n\r\n体验留言板功能吧！\r\n\r\n![](http://imageshack.com/a/img922/2607/Xkb381.png)\r\n\r\n\r\n\r\n![](http://imageshack.com/a/img921/4327/y6vJfO.png)\r\n\r\n\r\n\r\n![](http://imageshack.com/a/img921/3642/ceaSFR.png)\r\n\r\n\r\n\r\n", is_hidden: false])
puts "生成第四章第 3 节"

Task.create([course_id: 1, post_id: 17, due_time: Time.zone.now + 1.month, description: "请将你的实际作品画面 贴到 答案里（将截图拉倒对话框即可上传）"])
puts "生成作业 - 第四章第 3 节"

Chapter.create([chapter: "第五章 体验 Git", course_id: 1])
puts "生成第五章"

Post.create([course_id: 1, chapter_id: 5, title: "Git 基本指令", article: "## Git 基本指令\r\n\r\n这章我们会教大家几个基本的指令：\r\n\r\n* git config\r\n* git init\r\n* git add\r\n* git status\r\n\r\n\r\n\r\n#### What is Git ?\r\n\r\n***\r\n\r\nGit 是 Linux 之父 Linus Torvalds 开发出来的一套程式码版本控制系统。你可以把 git 想象成玩游戏时存档的工具。每当程式开发到一定的段落，就使用 git 存档一下。\r\n\r\n在这章我们不会覆盖到许多困难的 git 指令，只会 讲解必要的指令。\r\n\r\n\r\n\r\n##### git config\r\n\r\n***\r\n\r\n就像是首次玩游戏时一样，你必须设定游戏玩家角色叫什么。这里我们必须要设定两个参数：\r\n\r\n`git config --global user.name \"Jone Doe\"`\r\n`git config --global user.email johndoe@example.com`\r\n\r\n这样以后进行存档时，就会记录你是这次进度的存档者。\r\n\r\n\r\n\r\n##### git init\r\n\r\n***\r\n\r\n`git init` 初次设定进度储存库\r\n\r\n![](http://imageshack.com/a/img922/5797/LW5dE6.png)\r\n\r\n\r\n\r\n##### git add & git status\r\n\r\n***\r\n\r\n输入 `git add README.md`，再输入 `git status`\r\n\r\n![](http://imageshack.com/a/img923/4529/oP0M8J.png)\r\n\r\n你会发现 `README.md` 变成绿色，其余的档案还是红色。这表示我们已经预备将 `README.md` 「设定为预备储存进度的档案」。\r\n\r\n\r\n\r\n##### git commit\r\n\r\n***\r\n\r\n输入 `git commit -m \"add README\"` 真正将这个档案存进了进度区里。\r\n\r\n![](http://imageshack.com/a/img923/2643/LHcLH0.png)\r\n\r\n\r\n\r\n接着我们再输入一遍 `git status`，发现还是有很多档案，没有被存进进度区里。\r\n\r\n![](http://imageshack.com/a/img922/7776/rtk05M.png)\r\n\r\n\r\n\r\n所以这次我们也要将剩下的档案全都存进进度区里。\r\n\r\n输入 `git add .`，这样就可以把这个目录夹下 “所有还没有被加入 git 历史资料库的档案” 设为 “预备储存” 的状态。然后输入 `git commit -m \"add rest files\"` 储存剩下所有的档案。\r\n\r\n![](http://imageshack.com/a/img921/7889/GuL91s.png)\r\n\r\n", is_hidden: false])
puts "生成第五章第 1 节"

Post.create([course_id: 1, chapter_id: 5, title: "将 project 上传到 Github - (1) 设定 Github 账号", article: "## 将 project 上传到 Github - (1) 设定 Github 账号\r\n\r\nGithub 是 Opensource 社群中，重要的资源集散地。几乎人人都有一个账号，几乎是强制必备。请在此注册一个账号。\r\n\r\n[http://github.com](http://github.com/)\r\n\r\n\r\n\r\n#### 在 Github 上设定自己的电子签章\r\n\r\n***\r\n\r\n你可以这样想象，每一台笔记本电脑都有自己的电子签章，它就是你的 SSH Key。而 SSH Public Key 你可以想象成是在银行 ( Github）留的印章卡，去银行办事时，跟你的私有 Key 一对，就能确定这是你本人。\r\n\r\n所以在这里我们要进行一个在 Github 留印章卡的动作\r\n\r\n###### 步骤1\r\n\r\n***\r\n\r\n在 Terminal 先输入 `more ~/.ssh/id_rsa.pub` 看看有沒有东西。\r\n\r\n![](http://imageshack.com/a/img923/1329/n1tsR9.png)\r\n\r\n* 有的话 copy 整个内容，到步骤 3\r\n* 没有的话到步骤 2\r\n\r\n###### 步骤 2\r\n\r\n***\r\n\r\n如果沒有 id_rsa.pub 这个档案，请输入 `ssh-keygen` 连按三个 enter\r\n\r\n![](http://imageshack.com/a/img921/8559/UzyYdr.png)\r\n\r\n然后再输入一次 `more ~/.ssh/id_rsa.pub` ，把出来的内容 copy 起来\r\n\r\n\r\n\r\n###### 步骤 3\r\n\r\n***\r\n\r\n前往 [https://github.com/settings/ssh](https://github.com/settings/ssh)\r\n\r\n![](http://imageshack.com/a/img922/8035/HmoQXh.png)\r\n\r\n![](http://imageshack.com/a/img924/3844/cuq8MN.png)\r\n\r\n![](http://imageshack.com/a/img921/1210/9q4BEg.png)\r\n\r\n", is_hidden: false])
puts "生成第五章第 2 节"

Task.create([course_id: 1, post_id: 19, due_time: Time.zone.now + 1.month, description: "请留下你的 github 账号"])
puts "生成作业 - 第五章第 2 节"

Post.create([course_id: 1, chapter_id: 5, title: "将 project 上传到 Github - (2) 在 Github 上建立专案并上传程式码", article: "## 将 project 上传到 Github - (2) 在 Github 上建立专案并上传程式码\r\n\r\n#### 建立新 Project\r\n\r\n***\r\n\r\n假设你拥有一个全新的 Github 账号。你的 Github 首页会只出现两个选项。按下 “Start a project” 新增一个专案。\r\n\r\n![](http://imageshack.com/a/img922/1310/HFxGgt.png)\r\n\r\n选好你要的名字建立专案。这里我们使用 first_app\r\n\r\n![](http://imageshack.com/a/img923/5272/X6GIdR.png)\r\n\r\n建立以后，Github 会出现两个选项。一个是你复制 github 的空专案，重新来过。一个是你汇入现有的专案。而因为我们之前已经在本机里面有一个 git 专案了。所以我们选择选项 2。\r\n\r\n![](http://imageshack.com/a/img924/7407/W7yvgr.png)\r\n\r\n\r\n\r\n#### 上传专案\r\n\r\n***\r\n\r\n接着我们将 Github 好心帮我们准备的两行指令，贴到 Terminal 里面去。\r\n\r\n`git remote add origin git@github.com:xxddite/first_app.git` ( 这边改成 Github 提供给你的网址）\r\n`git push -u origin master`\r\n\r\n![](http://imageshack.com/a/img924/5660/sOYuIG.png)\r\n\r\n这样就完成了上传的动作。\r\n\r\n接着到我们刚刚设立的专案网址：[https://github.com/xxddite/first_app](https://github.com/xxddite/first_app)。 (这边改成 Github 提供给你的网址）\r\n\r\n这样就看到了我们刚刚上传的程式码。\r\n\r\n![](http://imageshack.com/a/img921/5408/MWybx1.png)\r\n\r\n", is_hidden: false])
puts "生成第五章第 3 节"

Task.create([course_id: 1, post_id: 20, due_time: Time.zone.now + 1.month, description: "请贴 github 网址"])
puts "生成作业 - 第五章第 3 节"

Post.create([course_id: 1, chapter_id: 5, title: "持续开发新功能并且上传到 Github", article: "## 持续开发新功能并且上传到 Github\r\n\r\n以后要如何持续开发新功能并且上传到 Github 呢？\r\n\r\n其实在这个阶段，你只要持续做 3 个功能，就行了。\r\n\r\n* `git add [档案名称]` （单个档案） 或 `git add .` （全部档案）\r\n* `git commit -m \"这次存档的信息\"`\r\n* `git push origin master` （上传到 github）\r\n\r\n就可以持续把进度同步到 Github。", is_hidden: false])
puts "生成第五章第 4 节"

# Create Chapter
Chapter.create([chapter: "第六章 上传专案到 Heroku", course_id: 1])
puts "生成第六章"

Post.create([course_id: 1, chapter_id: 6, title: "注册 Heroku 账号", article: "## 注册 Heroku 账号\r\n\r\n#### Heroku\r\n\r\n***\r\n\r\n我们所有的编程工作都是在自己的电脑上完成，所以只能在自己的浏览器上看到成果，如果想要让网站公开给大家看，就必须将它放到服务器上，这个把做好的网站安放到稳定的服务器上的动作，就叫部署（depoly）。\r\n\r\nHeroku 是 Rails 社群中，最方便的网站部署工具。如果你开发了小型的网站，Heroku 提供了非常便利的部署工具。（用 Git 上传就能部署）。在这里我们也要请各位先注册一个 Heroku 账号。\r\n\r\n[http://heroku.com](http://heroku.com/)\r\n\r\n\r\n\r\n#### Heroku Belt\r\n\r\n***\r\n\r\nHeroku Toolbelt 是 Heroku 所推出的环境命令工具包。请前往 [https://toolbelt.heroku.com/](https://toolbelt.heroku.com/) 安装。\r\n\r\n\r\n\r\n#### 完成 Heroku 的 SSH-key 的设定\r\n\r\n***\r\n\r\n先输入 `heroku login` 确认是否已经登入\r\n\r\n再输入 `heroic keys:add` 即可", is_hidden: false])
puts "生成第六章第 1 节"

Post.create([course_id: 1, chapter_id: 6, title: "上传专案到 Heroku", article: "## 上传专案到 Heroku\r\n\r\n#### 第一次 deploy 的方法\r\n\r\n***\r\n\r\n##### 步骤 1：开一个新的 Heroku 应用程式\r\n\r\n***\r\n\r\n在终端机打这些字：\r\n\r\n`heroku create`\r\n\r\n`heroku create` 会在 Heroku 的系统里面注册新的应用程式。跑完之后你应该会看到输出里面告诉你新的应用程式的 URL。\r\n\r\n![](http://imageshack.com/a/img921/4691/bRjV6r.png)\r\n\r\n\r\n\r\n然后 `git push heroku master`\r\n\r\n![](http://imageshack.com/a/img922/8871/ATSxaq.png)\r\n\r\n\r\n\r\n提示开发者并没有安装 sqlite3 。\r\n\r\n![](http://imageshack.com/a/img923/6329/31fEO8.png)\r\n\r\n\r\n\r\n这时候请千万不要傻傻的安装 sqlite3 。\r\n\r\nHeroku 的正式环境里，资料库其实并不支持 sqlite3，而是有自定义的资料库 pg。不过关于这段的解释太专业了，初入门的朋友可能看不懂，我们这里只先谈：如何绕过这个错误信息，让你的网站可以顺利部署上 Heroku。\r\n\r\n\r\n\r\n##### 步骤 2：修改 Gemfile\r\n\r\n***\r\n\r\n* 安装Atom的朋友，请在编辑器输入：`cd first＿app`， 按[enter]\r\n\r\n* 输入：`atom .`  ，按[enter]  就可以成功开启专案的档案群\r\n\r\n* 安装 Sublime的朋友，请在编辑器输入：`cd first＿app` 按[enter]\r\n\r\n* 输入：`subl .` ，按[enter]  就可以成功开启专案的档案群\r\n\r\n  ​\r\n\r\n在编辑器里打开 `Gemfile`  这个档案，将第 7 行的`gem 'sqlite3'` 剪下\r\n\r\n![](http://imageshack.com/a/img922/1032/EY3ixt.png)\r\n\r\n\r\n\r\n把 sqlite3 搬到大约第 30 行的这个 group 里面。\r\n\r\n![](http://imageshack.com/a/img921/8673/swvTLY.png)\r\n\r\n\r\n\r\n然后在大约第 47 行新增一个 production group，加上 pg 这个 gem\r\n\r\n![](http://imageshack.com/a/img923/3746/iRZwk7.png)\r\n\r\n存档。（按 command+s）\r\n\r\n\r\n\r\n##### 步骤 3：套用 Gemfile 的异动\r\n\r\n***\r\n\r\n然后在终端机里执行这条指令\r\n\r\n- `bundle install`\r\n\r\n每当你改 Gemfile 的時候，你都要跑一次 `bundle install`，这样子异动才会被套用。套用之后的异动会被存在另一个档案 `Gemfile.lock`。\r\n\r\n\r\n\r\n##### 步骤 4：把 Gemfile 的异动 commit 到 git\r\n\r\n***\r\n\r\n* `git add Gemfile`\r\n* `git add Gemfile.lock`\r\n* `git commit -m \"move sqlite3 to dev group & add pg to production group \"`\r\n\r\n\r\n\r\n##### 步骤5：上传到 Heroku\r\n\r\n***\r\n\r\n* `git push heroku master`\r\n\r\n![](http://imageshack.com/a/img923/6925/ELsm4u.png)\r\n\r\n![](http://imageshack.com/a/img923/4381/xhBO1o.png)\r\n\r\n\r\n\r\n#### 设定根目录\r\n\r\n***\r\n\r\n然后我们可以用 `heroku open` 打开网站。\r\n\r\n不过映入眼帘的却是：\r\n\r\n![](http://imageshack.com/a/img921/1000/SLWhy7.png)\r\n\r\n这是因为我们没有在 `config/routes.rb` 下设定首页。\r\n\r\n\r\n\r\n![](http://imageshack.com/a/img923/4397/0OaeRL.png)\r\n\r\n在第 3 行加入：\r\n\r\n`root \"topics#index\"` 让首页根目录指到 topics 的 index 那一页。\r\n\r\n之后我们再执行：\r\n\r\n* `git add . `\r\n* `git commit -m \"add root path\"`\r\n\r\n![](http://imageshack.com/a/img921/2129/MswxIy.png)\r\n\r\n再执行：\r\n\r\n* `git push heroku master`\r\n* `heroku open`\r\n\r\n映入眼帘的还是错误信息，只是这次变成：We're sorry, but something went wrong.\r\n\r\n![](http://imageshack.com/a/img922/3750/F2kP5n.png)\r\n\r\n\r\n\r\n我们可以使用 `heroku logs` ，观看 heroku 上的错误：\r\n\r\n![](http://imageshack.com/a/img924/5931/LR6mda.png)\r\n\r\n发现错误的信息在于 heroku 上面的 topics 资料库栏位，似乎并不存在。\r\n\r\n原来我们忘记跑了一个指令叫： `heroku run rake db:migrate`\r\n\r\n![](http://imageshack.com/a/img923/499/39TJxA.png)\r\n\r\n\r\n\r\n跑完再 `heroku open` ，看到这个画面，就表示一切顺利运行了。恭喜你，你有了第一个可以在公开空间上运行的论坛App！\r\n\r\n![](http://imageshack.com/a/img924/8867/gQdgEC.png)\r\n\r\n\r\n\r\n#### deploy 新版程式的方法\r\n\r\n***\r\n\r\n##### 步骤 1：把所有异动动 commit 到 git\r\n\r\n***\r\n\r\nHeroku 只受理我们有 commit 进本地 git repo 的程式，所以要确定修改过的档案都有 commit 进去了。\r\n\r\n在终端机输入这些字：\r\n\r\n`git status`\r\n\r\n`git status` 显示你还没 commit 进 git 的异动。如果没有输出任何东西的话，那你可以 deploy 了！不然的话就要 commit 程式码进去：\r\n\r\n在终端机输入这些字：\r\n\r\n`git add . `\r\n\r\n`git commit -m \"Some helpful message for your future self\"`\r\n\r\nCommit message 应该要可以描述你这次修改了什么东西，像是：“把投票数加到 topics 列表页”\r\n\r\n\r\n\r\n##### 步骤 2：把异动 push（上传）到 Heroku\r\n\r\n***\r\n\r\n在终端机输入这些字：\r\n\r\n`git push heroku master`\r\n\r\n这样子会把本地所有已经 commit 进去的异动都 push 到 Heroku。\r\n\r\n\r\n\r\n##### 步骤 3：在 Heroku 跑资料库的 migration\r\n\r\n***\r\n\r\n在终端机输入这些字：\r\n\r\n`heroku run rake db:migrate`\r\n\r\n这是叫 Heroku 在它的资料库跑 migration ，作用就像我们在本地跑 rake db:migrate。\r\n\r\nHeroku 的资料库跟你电脑上的资料库是分开的，也就是说每一次你更改了资料库的结构，你都要在 Heroku 的资料库更新一次。这也就是说在 Heroku 上面你不会看到你电脑上的 sqlite3 资料库里面的资料。\r\n\r\n\r\n\r\n##### 步骤4 ：上网看你的程式\r\n\r\n***\r\n\r\n在终端机输入这些字：\r\n\r\n`heroku open`\r\n\r\n会在浏览器打开你上传到 Heroku 的程式。\r\n\r\n\r\n\r\n#### 解说\r\n\r\n***\r\n\r\n首先，我们要让 Heroku 跟我们的程式可以整合。这需要修改 Gemfile 和重跑 bundler。\r\n\r\n* `Gemfile` 这个档案列出了所有你的 Rails 程式所需要的 Ruby 程式库（Library），称为「gem」。我们这里谈的是说，要在自己电脑的开发环境使用 `sqlite3` gem（写在 development group 里面）， 但是在上传到 Heroku（production group）的時候要使用 `pg` gem，这是专门设计给 Heroku 使用的资料库。\r\n* `Bundler`是 Ruby 专案用来追踪有使用哪些 gem 的工具。我们透过 `Gemfile` 跟 Bundler 说我们要什么 gem，然后我们要确定这些 gem 都有安装。因为我们目前电脑里面没有 Heroku 用的资料库系统， 所以我们跳过不安装 production 用的 gem。别担心，Bundler 还是会帮我们记得，让 Heroku 帮你安装。\r\n\r\n你可以在任何你的程式没问题、会动的时候 deploy。标准流程长得像这样：\r\n\r\n![](http://imageshack.com/a/img924/7731/cKphSq.png)\r\n\r\n1. 改程式\r\n\r\n2. 把异动 commit 进 git （`git commit`）\r\n\r\n3. （重复）\r\n\r\n   ​\r\n\r\n每当你把异动 commit 进 git 之后，你都可以执行 git push heroku master，然后新版本就上线了！", is_hidden: false])
puts "生成第六章第 2 节"

Task.create([course_id: 1, post_id: 23, due_time: Time.zone.now + 1.month, description: "请将你的 Heroku 作品网址贴在这里"])
puts "生成作业 - 第六章第 2 节"

# Create Chapter

Chapter.create([chapter: "第七章 将「开发环境」变得顺手", course_id: 1])
puts "生成第七章"

Post.create([course_id: 1, chapter_id: 7, title: "iTerm", article: "## iTerm\r\n\r\n很多朋友问，这个 Terminal 蛮好看的，请问要怎么调配出来。\r\n\r\n![](http://imageshack.com/a/img922/3027/vQzPvb.png)\r\n\r\n这套组合其实是一连串的配置：iTerm 与 zsh。\r\n\r\n\r\n\r\n####  iTerm2\r\n\r\n***\r\n\r\n![](http://imageshack.com/a/img922/1566/QZu9Eg.png)\r\n\r\n\r\n\r\n一般来说，程式设计师是很少用 Mac 官方所配的 Terminal App 做开发。都是使用 iTerm2 做高度客制的设定。\r\n\r\n请至官方网址：[http://www.iterm2.com/](http://www.iterm2.com/) 下载 iTerm，下载后拖来到 ”应用程式“，并打开。", is_hidden: false])
puts "生成第七章第 1 节"

Post.create([course_id: 1, chapter_id: 7, title: "zsh 与 ohmyzsh", article: "## zsh 与 ohmyzsh\r\n\r\n#### zsh\r\n\r\n***\r\n\r\nMac 系统预设的 shell 叫做 bash。而 zsh 多了一些比 bash 人性化的功能，能客制化的选项也比较多。\r\n\r\n\r\n\r\n#### 改变 shell 成为 zsh\r\n\r\n***\r\n\r\n- `chsh -s /bin/zsh` 即能改变成 zsh\r\n\r\n  ​\r\n\r\n#### 安装 oh-my-zsh\r\n\r\n***\r\n\r\n`cd ~/`\r\n`git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh`\r\n`cp ~/.zshrc ~/.zshrc.orig`\r\n`cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc`\r\n`atom .zshrc` （修改 .zshrc 档案）\r\n\r\n\r\n\r\n#### 修改 theme\r\n\r\n***\r\n\r\n```\r\n#ZSH_THEME=\"robbyrussell\"\r\nZSH_THEME=\"agnoster\"\r\n```\r\n\r\n\r\n\r\n#### 替换掉 agnoster 的 theme source code\r\n\r\n***\r\n\r\n修改 `~/.oh-my-zsh/themes/agnoster.zsh-theme` 换成以下內容\r\n\r\n[https://gist.github.com/agnoster/3712874/raw/c3107c06c04fb42b0ca27b0a81b15854819969c6/agnoster.zsh-theme](https://gist.github.com/agnoster/3712874/raw/c3107c06c04fb42b0ca27b0a81b15854819969c6/agnoster.zsh-theme)\r\n\r\n\r\n\r\n#### 安装字型\r\n\r\n***\r\n\r\n由于 agnoster 需要特殊字型。\r\n\r\n所以必须安装 patched 的三个字体：[https://gist.github.com/1595572](https://gist.github.com/1595572)。(下载后双击安装这三个字体。)", is_hidden: false])
puts "生成第七章第 2 节"

Post.create([course_id: 1, chapter_id: 7, title: "替换掉 iTerm 布景", article: "## 替换掉 iTerm 布景\r\n\r\n#### 安装 SOLARIZED 布景\r\n\r\n***\r\n\r\n[SOLARIZED](http://ethanschoonover.com/solarized) 布景是特殊调制的一个背景。按此 [下载](http://ethanschoonover.com/solarized/files/solarized.zip) 最新版本。\r\n\r\n解压后里面有很多布景。\r\n\r\n\r\n\r\n#### 替换掉 iTerm 布景\r\n\r\n***\r\n\r\n- `Preference` -> `Profiles` -> `Colors` -> `Load Presets` -> `Import`，载入 `iterm2-colors-solarized` 目录下的两个 itermcolors\r\n- `Preference` -> `Profiles` -> `Colors` -> `Load Presets`，载入 `Solarized Dark`\r\n\r\n\r\n\r\n#### 替换掉 iTerm 字型\r\n\r\n***\r\n\r\n- `Preference` -> `Profiles` -> `Text` 换成 Menlo 14 字体", is_hidden: false])
puts "生成第七章第 3 节"


puts "生成初级教程内容"
# Create 2nd Course Contents
Chapter.create([chapter: "第一章 教材介绍", course_id: 2])
puts "生成第一章"

Post.create([course_id: 2, chapter_id: 8, is_hidden: true, title: "前言", article: "## 前言\r\n\r\n---\r\n\r\n## 目标\r\n\r\n为了教会你 Ruby on Rails，我们会使用「真实世界」的范例。你现在打算要做一个投票系统，让你和你的朋友来玩。 你打算要做一个基本可用的程式，让使用者可以：\r\n\r\n- 检视主题，用投票来排序\r\n- 对主题投票\r\n- 开新主题、编辑主题、刪除主题\r\n- 贴张图让你看看它会长这样：\r\n\r\n![img](https://cdn.filepicker.io/api/file/sV3eQ7djRmOOqyTYGE3n)\r\n\r\n(这份教材是基于 RailsBridge 工作坊的 [Intro to Rails](http://docs.railsbridge.org/intro-to-rails/) 改编)\r\n\r\n### 练功目标\r\n\r\n当你把今天制作应用程式并上线的目标完成之后，你会学会：\r\n\r\n- 基本 Ruby 语法\r\n- 要怎么试一些 Ruby 程式码 (irb)\r\n- 要怎么把需求变成会动的 Rails 应用程式\r\n- 要怎么把你的应用程式放到网络上\r\n- Rails 工程师会使用的基本工具（版本控制、编辑器、console、本机 server）\r\n\r\n### 时程\r\n\r\n- 约 1 小时 Ruby\r\n- 约 4 小时 Rails，每一步骤约 1 小时。\r\n\r\n### 需求\r\n\r\n我们会用这些来做：\r\n\r\n- ruby 2.1.2 、2.2.0 、2.3.1用 RVM 安装（Mac 或 Linux）\r\n- rails 5.0.0\r\n- bundler\r\n- 你自己选的文字编辑器\r\n\r\n这些应该都要在前一份教程（环境配置课程）学习时就装好，确定它们都妥妥的。\r\n\r\n要确认一切没问题的话，可以在终端机输入：\r\n\r\n```\r\n> irb\r\n2.3.1 :001 > 1 + 2\r\n=> 3\r\n2.3.1 :001 > require \"active_support\"\r\n=> true\r\n2.3.1 :001 > exit\r\n\r\n\r\n```\r\n\r\n如果这些都跑的话，应该就没问题了。\r\n\r\n### 效能！效率！\r\n\r\n我非常推荐你这样做：\r\n\r\n- 打开终端机并开两个分页：\r\n  - 一个用来做平常的终端机指令\r\n  - 一个用来使用 irb （即 rails console）。我們之后会提到\r\n- 重新打开你的浏览器，或是把其他视窗关掉来\r\n  - 打开新的视窗并开两个分页\r\n  - 一个用来看本教程\r\n  - 一个用来测试你的程式\r\n- 打开文字编辑器，然后不要关掉它。我们不会中离。\r\n- 把其他应用程式都隐藏起来。关掉 Twitter 、即时通讯、別的干扰物。\r\n- 把跟你互动的东西最少化，可以减少你分心在这些东西的次数与耗费的时间。在浏览器里打开 50 个分页会干扰到你并且浪费时间。\r\n\r\n## 格式\r\n\r\n每一课的格式都会长这样：\r\n\r\n- 目标\r\n\r\n叙述我们要做什么。\r\n\r\n- 步骤\r\n\r\n跟着做，但是这时候你还不知道原理。\r\n\r\n- 解释\r\n\r\n关于这些步骤实际上做了什么的细节，详述原因与效果。将一切都连在一起。"])
puts "生成第一章第 1 节"


# Create Chapter
Chapter.create([chapter: "第二章 Ruby 程式语言", course_id: 2])
puts "生成第二章"

Post.create([course_id: 2, chapter_id: 9, is_hidden: true, title: "基础 Ruby", article: "## 基础 Ruby\r\n\r\n---\r\n\r\n## 目标：\r\n\r\n- 会使用 Ruby 基本的语法\r\n- 用 IRB 跑 Ruby 程式\r\n- 做简单的算数\r\n- 使用、了解 Variable（变数）\r\n- 使用、了解 Array（阵列）\r\n- 使用 Loop（回圈）和条件判断\r\n\r\n## 步骤\r\n\r\n### 步骤 1\r\n\r\n在终端机打这些字来启动 IRB（Interactive Ruby Shell），这个程式可以让你试一些 Ruby 程式码：\r\n\r\n```\r\nirb\r\n```\r\n\r\n长得像这样（你看到的或许会有些不同）：\r\n\r\n```\r\n2.3.1 :001 > \r\n```\r\n\r\n### 步骤 2\r\n\r\n接着试一些 Ruby 內建的简单算术。在 IRB 里面打字：\r\n\r\n```\r\n3 + 3\r\n7 * 6\r\n```\r\n\r\n### 步骤 3\r\n\r\nVariables（变数） 指的是一个被指定 values（值）的名字。\r\n\r\n```\r\nmy_variable = 5\r\n```\r\n\r\n这会把 5 这个值指定给 `my_variable` 这个名字。\r\n\r\n### 步骤 4\r\n\r\n也可以对变数做算数：\r\n\r\n```\r\nmy_variable + 2\r\nmy_variable * 3\r\n```\r\n\r\n### 步骤 5\r\n\r\n变数可以放多个值，这叫 Array（阵列）。\r\n\r\n```\r\nfruits = [\"kiwi\", \"strawberry\", \"plum\"]\r\n```\r\n\r\n这里我们用了 fruits 这个变数来放一群水果名。\r\n\r\n### 步骤 6\r\n\r\n在终端机打这些字：\r\n\r\n```\r\nfruits = fruits + [\"orange\"]\r\nfruits = fruits - [\"kiwi\"]\r\n```\r\n\r\n+和 - 叫做 Operators（运算符号）。跟数字一样，我们也可以把它们用在 array 上。\r\n\r\n### 步骤 7\r\n\r\n在 Ruby 里面，万物皆有 class （列别）。请在 IRB 里面打字：\r\n\r\n```\r\n7.class\r\n\"kiwi\".class\r\nfruits.class\r\n```\r\n\r\n这些就是我们至今介绍的三个资料形态：**Fixnum（数值）**、**String（文字）**、**Array（列表）**。\r\n\r\n### 步骤 8\r\n\r\n每个 class 都有不同的 **method （方法）**可以在该 class 的 **instance （实例）**使用\r\n\r\n```\r\nfruits.length\r\nfruits.first\r\n```\r\n\r\n你可以看看一个 object 所拥有的所有 method：\r\n\r\n```\r\nfruits.methods\r\n```\r\n\r\n还可以串在一起：\r\n\r\n```\r\nfruits.methods.sort\r\n```\r\n\r\n### 步骤 9\r\n\r\nArray 有个 method 叫做 **each**，会遍历它里面每一个项目并执行程式。\r\n\r\n```\r\nfruits.each do |fruit|\r\n  puts fruit\r\nend\r\n```\r\n\r\n这会把 fruits array 里面的第一项（\"strawberry\"）拿出來，把它设给fruit 变数，并执行 do 和 end 之间的程式。然后对其他项重做这件事。上面这段程式会印出水果的列表。\r\n\r\n### 步骤 10\r\n\r\n**conditional（条件式）** 只会在条件满足的时候才执行程式。\r\n\r\n```\r\nif my_variable > 1\r\n  puts \"YAY!\"\r\nend\r\n```\r\n\r\n如果 `my_variabl` 变数里面储存的值大于 1，才会印出 `YAY!`。\r\n\r\n请试着把 `>` 改成 `<`。\r\n\r\n### 步骤 11\r\n\r\n你也可以做自己的 method：\r\n\r\n```\r\ndef pluralize(word)\r\n  word + \"s\"\r\nend\r\npluralize(\"kiwi\")\r\n```\r\n\r\nMethod 会取 **parameters（参数）**，表示它们要对哪些变数操作。以此例而言，我们做了一个 method 叫做 pluralize ，它取一个参数 word，是一个单字。\r\n\r\nMethod 也可以 return（回传）资料。以此例而言，pluralize 会回传 word 单字加上 's' 结尾。在 Ruby 里面，method 会回传最后一行的结果，无论该结果是什么。"])
puts "生成第二章第 1 节"

# Create Chapter
Chapter.create([chapter: "第三章 Rails 初探", course_id: 2])
puts "生成第三章"

Post.create([course_id: 2, chapter_id: 10, is_hidden: true, title: "开始吧！", article: "## 开始吧！\r\n\r\n---\r\n\r\n![img](https://s3-ap-northeast-1.amazonaws.com/ontrackapp-production/5bhXugJ7Rbup5tk8iCin_Start_page.png)\r\n\r\n## 目标\r\n\r\n---\r\n\r\n建立你的 New Application\r\n\r\n来，开始吧！在这一步骤的最后，我们会得到一个全新的（空白）Rails 应用程式。\r\n\r\n## 步骤 （以下以 Mac 或 Linux 做为示范环境）\r\n\r\n---\r\n\r\n\r\n### 步骤 1\r\n\r\ncd 的意思是切换目录（**C**hange **D**irectory）\r\n\r\n在终端机打这些字 ( Mac 或 Linux )\r\n\r\n```\r\ncd ~\r\n```\r\n\r\ncd ~ 会把目录设成当前目录\r\n\r\n### 步骤 2\r\n\r\n在终端机打这些字：\r\n\r\n```\r\nmkdir railsbridge\r\n```\r\n\r\n这会新增一个资料夹，让我们把专案放在里面。\r\n\r\n### 步骤 3\r\n\r\n在终端机打这些字：\r\n\r\n```\r\ncd railsbridge\r\n```\r\n\r\n### 步骤 4\r\n\r\n确认一下你有沒有旧的程式码在里面（在之前练习时用的程式码）\r\n\r\n在终端机打这些字：\r\n\r\n```\r\nls\r\n```\r\n\r\n这个指令会列出 railsbridge 资料夹里面的档案。如果列出了旧的 suggestotron 应用程式，你可以刪掉它们来避免干扰：\r\n\r\n在终端机打这些字：\r\n\r\n```\r\nrm -rf suggestotron\r\n```\r\n\r\n### 步骤 5\r\n\r\n在终端机打这些字：\r\n\r\n```\r\nrails new suggestotron\r\n```\r\n\r\n`rails new` 会用你给的名字来建立新的 Rails 专案\r\n\r\n这次建立了一个叫做 suggestotron 的新专案。我们马上就会详细叙述它到底建了什么。\r\n\r\n### 步骤 6\r\n\r\n在终端机打这些字：\r\n\r\n```\r\ncd suggestotron\r\n```\r\n\r\n`cd` 指的是切换目录 (**c**hange **d**irectory)。\r\n\r\n`cd suggestotron` 切换到 suggestotron 做为当前资料夹。\r\n\r\n### 步骤 7\r\n\r\n在终端机打这些字：\r\n\r\n```\r\nls\r\n```\r\n\r\n`ls` 指的是列出东西 (**l**ist **s**tuff)。\r\n\r\n它会把目前资料夹的內容列出来给你看。\r\n\r\n### 步骤 8\r\n\r\n在你的文字编辑器里面用专案的方式打开 suggestotron 资料夹。\r\n\r\n在 Atom 里面，你可以选择 File > Add Project Folder...。\r\n\r\n![img](https://s3-ap-northeast-1.amazonaws.com/ontrackapp-production/VK95IFVJSDCcllQJNKhf_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202016-07-10%20%E4%B8%8B%E5%8D%889.43.28.png)\r\n\r\n然后在档案对话方块里面选择 suggestotron 资料夹。如果一切没问题的话，Atom 会在视窗左边以树状结构列出资料夹的內容：\r\n\r\n![img](https://s3-ap-northeast-1.amazonaws.com/ontrackapp-production/BMH6RhzoTXqDKA3JpvMm_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202016-07-10%20%E4%B8%8B%E5%8D%889.46.16.png)\r\n\r\n你会发现 rails new 开了一大堆资料夹和档案。今天我们要看的是这些：\r\n\r\n（**档案／资料夹 ：**用途 ）\r\n\r\n**app/ ：** 包含你应用程式的 controllers、models、views。你要改的东西大多是这些。\r\n\r\n**config/ ：** 设定应用程式的执行阶段规则、路由设定（routes）、资料库等等。\r\n\r\n**db/ ：**显示你目前资料库的 schema（结构定义），以及资料库的 migrations。\r\n\r\n**public/ ：**这是唯一一个资料夹会是放什么就出现什么的。如果你把档案放里面，server 会直接回传，不会经过 Rails 的处理。\r\n\r\n**app/assets/ ：**你会要把图片、JavaScript、stylesheets (CSS) 还有其他静态档案放在里面。现代的 Rails 应用程式使用一种叫做 Assets Pipeline 的东西，把在这资料夹里面的所有 JavaScript 和 CSS 档合并成一个档案来加速。\r\n\r\n`rails new` 还建立了其他很多东西。大概可以写一本书来讲，所以我们现在先无视它们。\r\n\r\n"])
puts "生成第三章第 1 节"

Post.create([course_id: 2, chapter_id: 10, is_hidden: true, title: "把专案加进 Git Repo", article: "## 把专案加进 Git Repo\r\n\r\n---\r\n\r\n## 目标\r\n\r\n---\r\n\r\n- 建一个本地的 git repository（仓库）\r\n- 把所有档案加入 git repository\r\n\r\n为了把我们的应用程式发布到网络上，我们要把我们的程式和过程中的修改都加到「版本控制系统」。我们会用 git ，因为它比较简单，而且 Heroku 也用它。\r\n\r\n## 步骤\r\n\r\n---\r\n\r\n### 步骤 1\r\n\r\n在终端机打这些字：\r\n\r\n```\r\ngit init\r\n```\r\n\r\n跑完之后它看起来沒有做什么事，然而事實上 `git init` 已经把 repository（repo）初始化到一个叫做 `.git` 的资料夹。 你可以打 `ls -a` （列出所有档案）来看到它。\r\n\r\n### 步骤 2\r\n\r\n在终端机打这些字：\r\n\r\n```\r\ngit status\r\n```\r\n\r\n`git status` 会告诉你 git 所见过所有改过、新增、刪掉的东西。\r\n\r\n第一次跑这个指令的时候，会看到很多东西。\r\n\r\n第二次跑这个指令的时候，你不会看到很多东西。\r\n\r\n### 步骤 3\r\n\r\n在终端机打这些字：\r\n\r\n```\r\ngit add .\r\n```\r\n\r\n`git add .` 告诉 git 你想要把目前资料夹（即 .）还有它底下的所有东西加进 repo。\r\n\r\n在 Git 里，有多个指令可以做到类似的事：\r\n\r\n- `git add foo.txt` 把名叫 foo.txt 的档案加进追踪修订。\r\n- `git add . (\"git add dot\")` 把所有新档案和改过的档案加进追踪修订，但「保留」你刪掉的档案。\r\n- `git add -A` 全部加进追踪修订，包括刪掉的档案。\r\n\r\n「把刪掉的档案加进来」听起来很奇怪，但如果你把版本控制系统想像成是追踪「修改」的工具，或许就会懂了。 多数人用 git add . 但 git add -A 会比较安全。无论如何，git status 都能帮上你的忙。\r\n\r\n### 步骤 4\r\n\r\n在终端机打这些字：\r\n\r\n```\r\ngit commit -m \"Added all the things\"\r\n```\r\n\r\n`git commit` 告诉 git 真的要执行你叫它做的事。\r\n\r\n分成 `add` 和 `commit` 两个步骤的好处是，如此你就可以把多个修改合并在一起。\r\n\r\n`-m \"Added all the things` 这个捷径让你可以直接写下 commit message。你可以省略之，这样 git 会打开一个编辑器请你填写详细的 commit message。\r\n\r\n### 解说\r\n\r\n现在你已经把你的程式放进 git 了，等于你在一开始做了一个存档点。在今天练习的任何时候，你若要修改程式码，我们都会先把它加进 git 再往下走。这样子的话，如果之后改烂，或是改出来你不喜欢，你都可以利用 git 来「还原」到先前的状态。不过当然你要随时存档啦！"])
puts "生成第三章第 2 节"

Post.create([course_id: 2, chapter_id: 10, is_hidden: true, title: "在本机执行你的程式", article: "## 在本机执行你的程式\r\n\r\n---\r\n\r\n## 目标\r\n\r\n---\r\n\r\n我们来把程式在本机启动吧！\r\n\r\n## 步骤\r\n\r\n---\r\n\r\n### 步骤 1\r\n\r\n在终端机打这些字：\r\n\r\n```\r\nrails server\r\n```\r\n\r\n### 步骤 2\r\n\r\n在你的浏览器打开 [http://localhost:3000](http://localhost:3000/)\r\n\r\n然后你就会看到的程式跑起来了！\r\n\r\n### 步骤 3\r\n\r\n在终端机里面，server 跑起来的时候，随时按下 Ctrl+C 就可以把 server 关掉。你可以马上试试看。\r\n\r\n预期的结果：\r\n\r\n```\r\n➜  suggestotron rails s\r\n=> Booting Puma\r\n=> Rails 5.0.0 application starting in development on http://localhost:3000\r\n=> Run `rails server -h` for more startup options\r\nPuma starting in single mode...\r\n* Version 3.4.0 (ruby 2.3.1-p112), codename: Owl Bowl Brawl\r\n* Min threads: 5, max threads: 5\r\n* Environment: development\r\n* Listening on tcp://localhost:3000\r\nUse Ctrl-C to stop\r\n^CExiting\r\n```\r\n\r\n## 解说\r\n\r\n`rails server` 会把你的程式在本机跑起来，就像 Heroku 会把程式在它们的服务器上跑起来。\r\n\r\n它提供了一个非常简单的方式让你可以在把程式上传到 Heroku 之前就看到结果。\r\n\r\n`Ctrl+C` 是一个把终端机处理程序关掉或取消掉的方法。因为 Rails server 会永久执行不停歇，你得要自己用`Ctrl+C` 来中断它。"])
puts "生成第三章第 3 节"

Post.create([course_id: 2, chapter_id: 10, is_hidden: true, title: "建立 Migration", article: "## 建立 Migration\r\n\r\n---\r\n\r\n## 目标\r\n\r\n---\r\n\r\n![img](https://s3-ap-northeast-1.amazonaws.com/ontrackapp-production/KnxmiCxQT2CuweYh6o11_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202016-07-10%20%E4%B8%8B%E5%8D%889.58.19.png)\r\n\r\n我们的 suggestotron 会有一个 Topics （主题）列表让大家来投票。我们会把 Topics 存进 database 里面。在这一步你会做这些事：\r\n\r\n- 在资料库里建立一个简单的「表格（Table）」来储存 Topics，Topic ，里面会有标题和內文。\r\n- 在 Rails 里自动产生相对用的 Scaffold（包含 Model、View、Controller）。\r\n\r\n## 步骤\r\n\r\n---\r\n\r\n### 步骤 1\r\n\r\n在终端机打这些字：\r\n\r\n```\r\nrails generate scaffold topic title:string description:text\r\n```\r\n\r\n- `generate scaffold` 告诉 Rails 去建立一堆档案让 topics 可以动。\r\n- `topic` 是告诉 rails 新的 Model 的名字叫 topic。\r\n- `title:string` 是说 topics 有标题（title），它是一个字串（String）。\r\n- `description:text` 是说 topics 有內文（description），它是一段文字（Text）。（「字串」跟「文字」的差别？基本上「文字」是用来储存可能会很长的字串。）\r\n\r\n你若有兴趣，可以花一点时间研究一下自动产生出来的档案。\r\n\r\n补充教材：[ Rails 架構](https://xin.ontrackapp.com/posts/51)\r\n\r\n### 步骤 2\r\n\r\n在终端机打这些字：\r\n\r\n```\r\nrake db:migrate\r\n```\r\n\r\n告诉 Rails 更新资料库来建立一个用来储存新的 Model 的表格（Table）。\r\n\r\n### 解说\r\n\r\nRake\r\n\r\n`rake (ruby make)` 这个工具让你可以执行小型的 Ruby 程式（称为 tasks），这些程式是你的程式常常会用到的。\r\n\r\n这里的 `rake db:migrate` 是由 Rails framework 提供的 task。它会使用我们刚建立的 migration 档`(db/migrate/201xxxxxxxxxxx_create_topi`cs.rb) 来更改资料库。资料库的 migration 档对于合作写程式是非常重要的。\r\n\r\n你可以执行 rake -T 来看看目前你的应用程式认得什么样的 rake 指令，还会附上简单的说明。"])
puts "生成第三章第 4 节"

Post.create([course_id: 2, chapter_id: 10, is_hidden: true, title: "CRUD 和 Scaffolding", article: "## CRUD 和 Scaffolding\r\n\r\n---\r\n\r\n## 目标\r\n\r\n大部份基于资料库的网站，其核心都是一样的，都要把资料存起来并且提供方法来做这些事：\r\n\r\n**C** - 建立（**C**reate）新资料并存进资料库。\r\n**R** - 读取（**R**ead）或显示资料库里的资料。\r\n**U** - 更新（**U**pdate）既有的资料。\r\n**D** - 刪除（**D**estroy）资料。\r\n\r\n这四个操作（CRUD）常见到 Rails 把它內建到 scaffold 指令里面，我们可以很容易实作出來。\r\n\r\n## 步骤\r\n\r\n---\r\n\r\n### 步骤 1\r\n\r\n在终端机打这些字：\r\n\r\n```\r\nrails server\r\n```\r\n\r\n### 步骤 2\r\n\r\n在浏览器打开 [http://localhost:3000/topics](http://localhost:3000/topics)\r\n\r\n你应该会看到一个「Listing Topics」的页面，有个空白但有 Title 和 Description 栏位标题的表格，还有一个链接可以新增 Topic：\r\n\r\n![img](https://s3-ap-northeast-1.amazonaws.com/ontrackapp-production/JHwePUCuQROywdaQMpOD_Seattle_topic_list_page.png)\r\n\r\n### 步骤 3\r\n\r\n- 按一下 `New Topic`\r\n- 填写表单，然后按一下 `Create Topic`\r\n- 你应该会看到一个网页，里面显示你新建的 topic，并且说你已经成功建立你的 topic 了：\r\n\r\n![img](https://s3-ap-northeast-1.amazonaws.com/ontrackapp-production/TlXYv0ZRQMCErLk4fctr_Seattle_topic_created.png)\r\n\r\n### 步骤 4\r\n\r\n- 按一下 `back`\r\n- 你应该会再看到 topics 列表，这次还有你刚刚新增的 topic：\r\n\r\n![img](https://s3-ap-northeast-1.amazonaws.com/ontrackapp-production/8gFEVlUxQUalWCQctHPX_Seattle_list_with_topic.png)\r\n\r\n- 试试看 `show`、`edit`、`destroy` 链接看看会发生什么事。\r\n- 贺！你已经建立了一个基本的资料库网站了！\r\n\r\n## 解说\r\n\r\n这些网页到底怎么建出来，又是如何连在一起的呢？Rails 的 scaffold 帮你处理好了。\r\n\r\n我们来仔细瞧瞧 rails 帮我们建立的档案：\r\n\r\n- `app/models/topic.rb`\r\n- 这个档案里面有我们的 topic model 的程式码。如果你仔细看，它其实几乎是空白的。 对资料的新增、读取、更新、刪除操作在 Rails 是內建的。\r\n- `app/views/topics`\r\n- 这个资料夹里面有我们的 topics model 的 view 的程式码。 你刚刚使用的表单的程式码就放在这里面。Rails 会帮你建好这些档案作为 scaffold 的一部分。\r\n- 如果你以前写过 HTML，这些程式你应该不陌生。 Rails 的 view 只是 HTML 加上一些用来显示资料库的资料的程式。\r\n- `app/views/topics/index.html.erb`\r\n  - 这个程式是用在列出所有 topics 的页面。\r\n  - index 是用来表示一个网站或网站的一部分的「预设」页面。当你打开 [http://localhost:3000/topics](http://localhost:3000/topics) 的时候，topics 的 index 页面会传送到你的电脑上。\r\n- `app/views/topics/show.html.erb`\r\n  - 是当你在 `Listing topics` 按一下 `show` 时会看到的页面。\r\n- `app/views/topics/new.html.erb`\r\n  - 是当你按一下 `New Topic` 时会看到的页面。\r\n  - `app/views/topics/edit.html.erb`\r\n  - 是当你按一下 `Edit` 时会看到的页面。\r\n- `app/views/topics/_form.html.erb`\r\n  - 你或许注意到了，新增 topic 和编辑 topics 的页面长得很像。这是因为它们都使用了这个档案来显示表单。 这种档案称作 `partial`，因为他只有网页里面一部分的內容。Partial 的档案名一定是底线开头的。\r\n  - 挑战题：你可以找到 partial 是在 new.html.erb 和 edit.html.erb 的哪一行程式被引用的吗？\r\n- `app/controllers/topics_controller.rb`\r\n  - 这称为 controller 档，Rails 自动透过 scaffold 产生的。\r\n  - 如果你打开来看，你会看到每一个 view ，除了 _form.html.erb 之外都对应到一个 method（开头是 def）。"])
puts "生成第三章第 5 节"

Post.create([course_id: 2, chapter_id: 10, is_hidden: true, title: "设定首页", article: "## 设定首页\r\n\r\n---\r\n\r\n## 目标\r\n\r\n---\r\n\r\n现在结构已经打好了，来把流程变顺畅吧。\r\n\r\n现在你打开 [http://localhost:3000](http://localhost:3000/) 的话，你会看到 \"Welcome aboard\" 的字样。\r\n\r\n如果 [http://localhost:3000](http://localhost:3000/) 可以直接跑到 topics 列表的话会比较方便哦。\r\n\r\n在这一步我们会实现它，并从中学习 Rails 路由（routes）的基本。\r\n\r\n## 步骤\r\n\r\n---\r\n\r\n### 步骤 1：加入 root route\r\n\r\n在编辑器打开 `config/routes.rb`\r\n\r\n搜寻 `Rails.application.routes.draw` 在下面加一行 `root 'topics#index'`\r\n\r\n看起来会像这样\r\n\r\nconfig/routes.rb\r\n\r\n````\r\nRails.application.routes.draw do\r\n  root 'topics#index'\r\n````\r\n\r\n## 步骤 2：确认修改成功\r\n\r\n回到 [http://localhost:3000/](http://localhost:3000/)。你应该会被带到 topics 列表。\r\n\r\n## 解说\r\n\r\n---\r\n\r\n`root 'topics#index'` 这个 route 是用来告诉 rails 你的网站的预设位置是`topics#index`。 topics#index 指的是列出 topics 的那个页面（Topics Controller 的 index action）。\r\n\r\n- Rails routes 控制了 URL（网址）如何对应到 server 上的程式码。就好比地址对应到房子或公寓。\r\n- `config/routes.rb` 档像是一个地址簿，列出所有可以使用的地址，以及对应到的程式码。\r\n- `routes.rb` 使用了一些简写法，所以我们不会在档案里看到所有的 URL。可以利用终端机来看看有哪些 URL。\r\n\r\n在终端机输入 `rake routes`。你会看到像这样的东西：\r\n\r\n```\r\n$ rake routes\r\n\r\n    Prefix Verb   URI Pattern                Controller#Action\r\n    topics GET    /topics(.:format)          topics#index\r\n           POST   /topics(.:format)          topics#create\r\n new_topic GET    /topics/new(.:format)      topics#new\r\nedit_topic GET    /topics/:id/edit(.:format) topics#edit\r\n     topic GET    /topics/:id(.:format)      topics#show\r\n           PATCH  /topics/:id(.:format)      topics#update\r\n           PUT    /topics/:id(.:format)      topics#update\r\n           DELETE /topics/:id(.:format)      topics#destroy\r\n      root GET    /                          topics#index\r\n```\r\n\r\n这样就可以显示所有你的应用程式会处理的 URL 了。有些冒号（:）开头的是变数， :id 表示资料的 id 编号。括号框起来的是可以省略的。\r\n\r\n在 Rails 4 里面，你也可以在开发环境从你的网站上直接看到这个资讯。请打开 [http://localhost:3000/rails/info](http://localhost:3000/rails/info) 你就会看到像这样的东西：\r\n\r\n![img](https://s3-ap-northeast-1.amazonaws.com/ontrackapp-production/LVR7t9kLQPermUmTNN01_rails4_rails_info_routing.png)\r\n\r\n如果你随便开一个不存在的网址，也会看到这个画面。（试试看 [http://localhost:3000/sandwich](http://localhost:3000/sandwich)）\r\n\r\n### Exploring Routes （可以跳过）\r\n\r\n现在你可以看看你的程式里面可以用的 path 有哪些。我们来试试看我们刚刚产生的一个 topics 的 route。打开 `rails console` 来玩玩看：\r\n\r\n```\r\n> rails console\r\n2.3.1 :001 > app.topics_path\r\n=> \"/topics\"\r\n2.3.1 :001 > app.topics_url\r\n=> \"http://www.example.com/topics\"\r\n```\r\n\r\n`app` 这个特別的 object 表示你的整个应用程式。 你可以问它有什么 route、玩玩看资料库连线、或是模拟 `get`、`post` 的 web requests（还有很多）。\r\n\r\n## 部署（Deploying）\r\n\r\n---\r\n\r\n在继续下一步之前，你可以考虑把程式上传到 Heroku！"])
puts "生成第三章第 6 节"

Post.create([course_id: 2, chapter_id: 10, is_hidden: true, title: "对 Topic 投票", article: "## 对 Topic 投票\r\n\r\n---\r\n\r\n## 目标\r\n\r\n---\r\n\r\n- 建立投票的 model\r\n\r\n![img](https://s3-ap-northeast-1.amazonaws.com/ontrackapp-production/DoNxzxLRsGXvNdjJ1ggt_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202016-07-10%20%E4%B8%8B%E5%8D%8810.17.57.png)\r\n\r\nSuggestotron 里面的每一个 topic 都可以投票。为了计算票数，我们要有投票记录。来加个 table 吧。\r\n\r\n## 步骤\r\n\r\n---\r\n\r\n在终端机打这些字：\r\n\r\n```\r\nrails generate model vote topic_id:integer\r\nrake db:migrate\r\n```\r\n\r\n## 解说\r\n\r\n---\r\n\r\n- 跟之前一样，我们要开一个叫做 \"vote\" 的 model。\r\n- 不一样的地方只有那个叫做 topic_id 的整数。\r\n  - 我们需要 topic_id 才能把投票记录和 topic 连起来。\r\n- 这次我们沒有产生整个 scaffold，因为我们其实沒有要做完整的 CRUD；投票记录只被视为 topic 的一小部分。"])
puts "生成第三章第 7 节"

Post.create([course_id: 2, chapter_id: 10, is_hidden: true, title: "把投票记录和 Topics 接起来", article: "## 把投票记录和 Topics 接起来\r\n\r\n---\r\n\r\n## 目标\r\n\r\n---\r\n\r\n![img](https://s3-ap-northeast-1.amazonaws.com/ontrackapp-production/XPaKQENjQ1OBk75V8e4x_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202016-07-10%20%E4%B8%8B%E5%8D%8810.20.26.png)\r\n\r\n资料库里面有了关联号码，接下来我们要来告诉 Rails，topic 和投票记录之间有明确的关系。\r\n\r\n## 步骤\r\n\r\n---\r\n\r\n### 步骤 1：告诉 Topic model 有 Vote（投票记录）的存在\r\n\r\n编辑 `app/models/topic.rb` 让它长得像这样：\r\n\r\napp/models/topic.rb\r\n\r\n``` app/models/topic.rb\r\nclass Topic < ActiveRecord::Base\r\n  has_many :votes, dependent: :destroy\r\nend\r\n```\r\n\r\n### 步骤 2：告诉 Vote model 有 Topic 的存在\r\n\r\n编辑 `app/models/vote.rb` 让它长得像这样：\r\n\r\n```\r\nclass Vote < ActiveRecord::Base\r\n  belongs_to :topic\r\nend\r\n```\r\n\r\n### 步骤 3：进 Rails console 随便玩玩看 Topic 和 Vote model\r\n\r\n首先，先確定你已经开了至少一篇 topic。\r\n\r\n然后，从终端机视窗进入 Rails console：\r\n\r\n```\r\nrails c\r\n```\r\n\r\n预期的结果：\r\n\r\n```\r\nRunning via Spring preloader in process 11071\r\nLoading development environment (Rails 5.0.0)\r\n2.3.1 :001 >\r\n```\r\n\r\n在 console 里面试试看这些指令：\r\n\r\n检查总共有多少 topics：\r\n\r\n```\r\nTopic.count\r\n```\r\n\r\n把第一篇 topic 存入变数\r\n\r\n```\r\nmy_topic = Topic.first\r\n```\r\n\r\n`my_topic` 可以是任何的变数名称，不过现在我们一律用 `my_topic`。\r\n\r\n把那个 topic 的 title 改成別的：\r\n\r\n```\r\nmy_topic.update_attributes(title: 'Edited in the console')\r\n```\r\n\r\n新增一笔投票记录给那个 topic：\r\n\r\n```\r\nmy_topic.votes.create\r\n```\r\n\r\n检查 topic 总共有多少笔投票：\r\n\r\n```\r\nmy_topic.votes.count\r\n```\r\n\r\n刪除一笔那个 topic 的投票记录：\r\n\r\n```\r\nmy_topic.votes.first.destroy\r\n```\r\n\r\n请注意，你在 **Model class**（例如 **Topic**、**Vote**）和 **Model instance**（例如此例的 `my_topic`）可以做的事是不一样的。`my_topic.votes` 称作 `association`，在这里的行为比较像是 model class。\r\n\r\n![img](https://s3-ap-northeast-1.amazonaws.com/ontrackapp-production/GmS6BOkCRJagJJkU7fx0_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202016-07-10%20%E4%B8%8B%E5%8D%8810.27.27.png)\r\n\r\n要看完整的列表的話，你可以上 [Active Record Query Interface RailsGuide](http://guides.rubyonrails.org/active_record_querying.html)。\r\n\r\n## 解说\r\n\r\n---\r\n\r\n`has_many` 和 `belongs_to`：\r\n\r\n- 在 Rails 里面，model 和 model 之间的关联叫做 associations。\r\n- Associations（通常）成对出现。\r\n- 一篇 topic 会有许多（have many）投票记录，所以要在 Topic model 里面写 has_many :votes。\r\n  - 当你向一篇 topic 要它的投票记录的時候，你会得到一个 Array，里面有该 topic 的投票记录。\r\n- 一笔投票记录对应到一篇特定的 topic，所以要在 Vote model 里面写 belongs_to :topic。\r\n  - 当你向一笔投票记录要它的 topic 的时候，你会得到那笔投票记录所属的 topic。\r\n\r\n此外，自己被刪除时候，删掉所拥有的資料也很重要。在 `has_many :votes` 的 `dependent: :destroy`意思是说，当一篇**Topic** 被刪除（destroy）的时候，它的投票记录（**votes**）也要一并删除。沒有 `dependent :destroy` 的话，这些投票记录会永远留在资料库里面。\r\n\r\n"])
puts "生成第三章第 8 节"

Post.create([course_id: 2, chapter_id: 10, is_hidden: true, title: "让大家可以投票", article: "## 让大家可以投票\r\n\r\n---\r\n\r\n## 目标\r\n\r\n---\r\n\r\n现在我们要来加一个按钮，让大家可以按下去就投票加分。\r\n\r\n## 步骤\r\n\r\n---\r\n\r\n### 步骤 1：加一个新的 controller action 来投票加分\r\n\r\n编辑 `app/controllers/topics_controller.rb` 然后把以下这个 method 加在 controller 下方的 `private keyword`之上：\r\n\r\napp/controllers/topics_controller.rb\r\n\r\n```\r\ndef upvote\r\n  @topic = Topic.find(params[:id])\r\n  @topic.votes.create\r\n  redirect_to(topics_path)\r\nend\r\n```\r\n\r\n\r\n\r\n- `@topic = Topic.find(params[:id])` 从资料库里面用 id 找到 topic 然后存进 `@topic` 变数里面。\r\n- `@topic.votes.create` 给目前这篇 topic 新增一笔投票记录，然后存进资料库里面。 `redirect_to(topics_path)` 跟浏览器说要回到 topics_path（topics 的列表）。\r\n\r\n### 步骤 2：给投票加分操作加一个 route\r\n\r\n打开 `config/routes.rb` 然后找这个：\r\n\r\n```\r\nresources :topics\r\n```\r\n\r\n取代之，让它长得像这样：\r\n\r\nconfig/routes.rb\r\n\r\n```\r\nresources :topics do\r\n  member do\r\n    post 'upvote'\r\n  end\r\nend\r\n```\r\n\r\n现在来检查 route 有成功加入，方法是看一下 `rake routes` 的输出结果，或是打开 [http://localhost:3000/rails/info](http://localhost:3000/rails/info)。你应该会看到有一行长得像这样：\r\n\r\n```\r\n  Prefix Verb   URI Pattern                  Controller#Action\r\nupvote_topic POST   /topics/:id/upvote(.:format) topics#upvote\r\n```\r\n\r\n### 步骤 3：在 view 里面加一个按钮\r\n\r\n编辑 `app/views/topics/index.html.erb` 让最下面的 loop（回圈）程式码长得像这样：\r\n\r\napp/views/topics/index.html.erb    \r\n\r\n```\r\n<% @topics.each do |topic| %>\r\n  <tr>\r\n    <td><%= topic.title %></td>\r\n    <td><%= topic.description %></td>\r\n    <td><%= pluralize(topic.votes.count, \"vote\") %></td>\r\n    <td><%= button_to '+1', upvote_topic_path(topic), method: :post %></td>\r\n    <td><%= link_to 'Show', topic %></td>\r\n    <td><%= link_to 'Edit', edit_topic_path(topic) %></td>\r\n    <td><%= link_to 'Destroy', topic, method: :delete, data: { confirm: 'Are you sure?' } %></td>\r\n  </tr>\r\n<% end %>\r\n```\r\n\r\n- `pluralize(topic.votes.count, \"vote\")`  会输出票数，并且根据（英文的）单复数在后面加上 'vote' 或 'votes' 单字。\r\n- `button_to '+1'`加一个 HTML 的按钮（button），里面有字 '+1'。\r\n- `upvote_topic_path(topic)` 产生我们要呼叫的 action 的对应 URL。以此例而言，我们要对目前的 topic 投票加分。upvote_topic_path(topic) 会回传 `/topics/42/upvote`（如果 topic.id 是 42）。\r\n- `method: :post` 確保我们使用了 CRUD 里面的 create 操作，而非 read。\r\n\r\n### 步骤 4：在浏览器里面检查修改成功\r\n\r\n回到 [http://localhost:3000/topics](http://localhost:3000/topics) 然后随便玩玩看。\r\n\r\n嗯，你发现了吗，改程式不用重开 server 哦。酷吧？\r\n\r\n### 部署（Deploying）\r\n\r\n在继续下一步之前，你可以考虑把程式上传到 Heroku！"])
puts "生成第三章第 9 节"

Post.create([course_id: 2, chapter_id: 10, is_hidden: true, title: "新增 Topic 之后转回 Topics 列表", article: "## 新增 Topic 之后转回 Topics 列表\r\n\r\n---\r\n\r\n## 目标\r\n\r\n---\r\n\r\n当使用者建立了一篇新的 topic、或是编辑既有的 topic 的时候，使用者将会看到单独那一篇 topic 的页面。但对于我们的投票程式来说，如果能夠回到 topics 列表会更好。\r\n\r\n所以在这一步里面我们将会修改程式的流程，让 user 新增（create）topic 或编辑（update）topic 之后可以回到 topics 列表。\r\n\r\n## 步骤\r\n\r\n---\r\n\r\n### 步骤 1：修改 topics controller\r\n\r\n打开 `app/controllers/topics_controller.rb` 找到 `create` method。\r\n\r\n找这一行：\r\n\r\n`format.html { redirect_to @topic, notice: 'Topic was successfully created.' }`\r\n\r\n把 `@topic` 改成 `topics_path`，像这样：\r\n\r\n`format.html { redirect_to topics_path, notice: 'Topic was successfully created.' }`\r\n\r\n最后会长得像这样：\r\n\r\napp/controllers/topics_controller.rb\r\n\r\n```\r\ndef create\r\n  @topic = Topic.new(topic_params)\r\n\r\n  respond_to do |format|\r\n    if @topic.save\r\n      format.html { redirect_to topics_path, notice: 'Topic was successfully created.' }\r\n      format.json { render action: 'show', status: :created, location: @topic }\r\n    else\r\n      format.html { render action: 'new' }\r\n      format.json { render json: @topic.errors, status: :unprocessable_entity }\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n在同一个档案里面，找到 `update` method。\r\n\r\n找这一行：\r\n\r\n```\r\nformat.html { redirect_to @topic, notice: 'Topic was successfully updated.' }\r\n```\r\n\r\n跟之前一样，把 `@topic` 改成 `topics_path`：\r\n\r\n```\r\nformat.html { redirect_to topics_path, notice: 'Topic was successfully updated.' }\r\n```\r\n\r\n### 步骤 2：加 flash message 到程式的 view 里面\r\n\r\n打开 `app/views/layouts/application.html.erb`。\r\n\r\n找\r\n\r\nHTML tag，在它的正下方加入这些程式：\r\n\r\napp/views/layouts/application.html.erb\r\n\r\n```\r\n<% flash.each do |name, msg| %>\r\n    <div><%= msg %></div>\r\n<% end %>\r\n```\r\n\r\n### 步骤 3：确认修改成功\r\n\r\n打开 [http://localhost:3000](http://localhost:3000/) 然后玩玩看。\r\n\r\n## 解说\r\n\r\n---\r\n\r\n `format.html { redirect_to topics_path, notice: 'Topic was successfully create`d.' }：\r\n\r\n `format.html`指的是当浏览器向 server 请求 HTML 格式的时候要做的事（要做的事在 { ... } 里面）。\r\n\r\n `redirect_to topics_path` 指的是在新增或编辑完成一篇 topic 之后要回到 topics 列表页面。\r\n\r\n `notice: 'Topic was successfully created/updated.'`把讯息丟进 flash 里面，这样子回到 topics 列表页面的时候就会看到。"])
puts "生成第三章第 10 节"

Post.create([course_id: 2, chapter_id: 10, is_hidden: true, title: "把 Topic 标题变成可以点选的超链接", article: "## 把 Topic 标题变成可以点选的超链接\r\n\r\n---\r\n\r\n## 目标\r\n\r\n---\r\n\r\n或者你朋友建议你把网站修改之后会更好：\r\n\r\n- 不要在 topics 列表页面出现內文。\r\n- 把 topics 变成超链接，使用者必须点选 topics 才会显示內文。\r\n\r\n## 步骤\r\n\r\n---\r\n\r\n### 步骤 1：拿掉內文\r\n\r\n首先来拿掉內文（description）吧。打开`app/views/topics/index.html.erb` 然后删掉这一行：\r\n\r\napp/views/topics/index.html.erb\r\n\r\n```\r\n<td><%= topic.description %></td>\r\n```\r\n\r\n也删掉这一行\r\n\r\napp/views/topics/index.html.erb\r\n\r\n```\r\n<th>Description</th>\r\n```\r\n\r\n现在可以试试看在浏览器里面重新整理，你应该会发现内文消失了。\r\n\r\n## 步骤 2：把标题变成超链接\r\n\r\n---\r\n\r\n现在来把标题变成超链接，编辑 `app/views/topics/index.html.erb` 然后把这一行：\r\n\r\napp/views/topics/index.html.erb\r\n\r\n```\r\n<td><%= topic.title %></td>\r\n```\r\n\r\n改成这样：\r\n\r\napp/views/topics/index.html.erb\r\n\r\n```\r\n<td><%= link_to topic.title, topic %></td>\r\n```\r\n\r\n## 解说\r\n\r\n---\r\n\r\napp/views/topics/index.html.erb\r\n\r\n```\r\n<td><%= topic.description %></td>\r\n```\r\n\r\n这一行用了 `.description` 来取得內文，然后直接输出。\r\n\r\napp/views/topics/index.html.erb\r\n\r\n```\r\n<th>Description</th>\r\n```\r\n\r\n`<th>` 指的是表格表头（table header），在 `<th>`和 `</th>` 之间的字会变成表头（粗体）。我们把它删掉，因为我们要拿掉內文栏位，不然的话栏位对不齐会很奇怪。\r\n\r\napp/views/topics/index.html.erb\r\n\r\n```\r\n<td><%= link_to topic.title, topic %></td>\r\n```\r\n\r\n这里来了一个新的 `link_to`（制作超链接）的用法。这次制作的超链接使用了 topic 的标题（title），连到 topics#show 的页面。"])
puts "生成第三章第 11 节"

Post.create([course_id: 2, chapter_id: 10, is_hidden: true, title: "清理 Topics 列表不需要的链接", article: "## 清理 Topics 列表不需要的链接\r\n\r\n---\r\n\r\n## 目标\r\n\r\n---\r\n\r\n我们的程式快要完成了！topics 列表页看起来很冗。其实有一些链接是无用的。\r\n来清理一下吧：\r\n\r\n- 拿掉 `show` 超链接。\r\n- 拿掉 `edit` 超链接。\r\n- 把 `destroy` 改成 `delete`。\r\n\r\n## 步骤\r\n\r\n---\r\n\r\n### 步骤 1：拿掉 `show` 和 `edit` 超链接\r\n\r\n打开 `app/views/topics/index.html.erb` 删除这两行：\r\n\r\napp/views/topics/index.html.erb\r\n\r\n```\r\n<td><%= link_to 'Show', topic %></td>\r\n<td><%= link_to 'Edit', edit_topic_path(topic) %></td>\r\n```\r\n\r\n### 步骤 2：把 `destroy` 改成 `delete`\r\n\r\n把有 `Destroy` 字样的那一行修改成这样：\r\n\r\napp/views/topics/index.html.erb\r\n\r\n```\r\n<td><%= link_to 'Delete', topic, method: :delete, data: { confirm: 'Are you sure?' } %></td>\r\n```\r\n\r\n### 步骤 3：确认修改成功\r\n\r\n存档，然后重新整理浏览器，看看修改有沒有成功。\r\n\r\n## 解说\r\n\r\n---\r\n\r\n我们拿掉的两个超链接是 show 和 edit。这样做是因为标题已经连到 show 页面了，在 show 页面里可以连到 edit 页面。\r\n\r\n第二个修改是把链接文字从 `Destroy` 改成 `Delete`。"])
puts "生成第三章第 12 节"

Post.create([course_id: 2, chapter_id: 10, is_hidden: true, title: "加分题 & 下一步", article: "## 加分题 & 下一步\r\n\r\n---\r\n\r\n你知道吗？你**做完了**！！！祝贺！你刚「完成」了你的第一个 Rails 程式！\r\n\r\n（嗯……其实沒有真的做完，你可以随便改改看！）\r\n\r\n### 加分题\r\n\r\n如果你完成了 Suggestotron 而还剩下一些时间，你可以试试看这些：\r\n\r\n- 加一个「扣分」按钮，做的事跟加分按钮相反。\r\n- 根据投票分数排序 topics。\r\n- 新增一个 'about' 页面，并将链接放在 topics 列表的最下方。记得也要在 About 页面上放置回 Topics 列表的链接，以免使用者迷路。"])
puts "生成第三章第 13 节"


# Create Chapter
Chapter.create([chapter: "第四章 补充教材", course_id: 2])
puts "生成第四章"

Post.create([course_id: 2, chapter_id: 11, is_hidden: true, title: "补充教材：Rails 架构", article: "## 目标\r\n\r\n---\r\n做一个资料库表格来储存 topic，topic 有 title 和 description。\r\n\r\n在这一步我们会学一点 Rails 的架构。最终你应该会了解这些观念：\r\n\r\n- Table\r\n- Model\r\n- View\r\n- Controller\r\n\r\n## 解说\r\n\r\n---\r\n\r\n### Rails 的架构以及它与资料库的关联\r\n\r\n![img](https://s3-ap-northeast-1.amazonaws.com/ontrackapp-production/2aFSZZRQKei3eSroobFg_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202016-07-10%20%E4%B8%8B%E5%8D%8811.14.22.png)\r\n\r\nRails 把 **Model/View/Controller** 的设计模式实作得非常具体，来指引你如何设计你的网络应用程式。\r\n\r\n#### Model\r\n\r\n- 我们在 RailsBridge 建立的 Model，其每一个 Model object 都在资料库里面有对应的资料。资料库里面的表格（table）是 Model 的 class name 的复数形。例如，如果 Model 叫做 'Duck'，就会自动去资料库读取 'ducks' 这个表格。\r\n- Rails 內部的 methods 让我们可以很容易把资料写入到资料库，之后再从资料路里面查询（query）出来。\r\n- Model 是介于资料库和你的程式码之间的桥梁。\r\n\r\n#### View\r\n\r\n- View 会产生 HTML 来显示在浏览器。\r\n- View 档案是用 ERB 写的，它是一种样板语言（Template Language）。里面是 HTML 加上內嵌的 Ruby 程式码。View 里面的 Ruby 的变数便是当使用者要浏览该页面的时候，所要填入的內容。\r\n- （还有别的样板语言，但是在 RailsBridge 我们只用 ERB。）\r\n\r\n#### Controller\r\n\r\n- Controller 把 Ruby 的 objects 在 Model 和 View 之间传来传去。\r\n- 每一个 URL 都对应到 Controller 里面的某一个特定的 method。\r\n- 在这一步骤以后，当你打开你的应用程式里面的任何一个页面，该请求（request）会被某个 Controller 的 method 处理。\r\n\r\n当我们把 Models、Views、Controllers 放在一起的时候，他们会遵循以下的模式：\r\n\r\n给一个 URL，Rails 会去检查要使用哪一个 Controller 里面的 method（又称为 \"Action\"）。Controller Action 会去呼叫 Model 里面对应的 methods。Model 会去读写资料库，然后把包含资料的 object 回传到 Controller。Controller 会拿到这个 object 并且丟到 View 里面。Action 通常会有对应的 View 档案，Rails 会自动寻找并使用之。）\r\n\r\nModels、Views、Controllers 有各自的工作。像这样把责任拆开来，会比较容易开发，尤其是它长得愈來愈大的时候。（每个档案都有清晰的责任，会比较容易出来问题、增加新功能。）\r\n\r\n如果你想要学更多 Rails 架构的話，你可以看一下这个教学影片（三分半钟）[MVC 架構 YouTube](https://www.youtube.com/watch?v=eTdVkgF_Slo)"])
puts "生成第三章第 13 节"


Chapter.update_all(is_hidden: false)
Post.update_all(is_hidden: false)

# Create Faqs inside Course
Faq.create([course_id: 1, title: "即时通讯工具 slack 需要翻墙才能用。如何翻墙？", description: "请搜索可以提供翻墙的服务软件，如：云梯、多态、ExpressVPN"])
puts "1st Faq in 1st Course created."

Faq.create([course_id: 1, title: "安装 Ruby 的过程中后台一直没有动。", description: "因为安装 RubyGems 的时候需要打开 vpn，很可能是vpn连不上。\r\n\r\n解决方法：在 Terminal 窗口多执行一行以下指令。速度应该会快很多。\r\n\r\n```\r\ngem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/\r\n```"])
puts "2nd Faq in 1st Course created."

Faq.create([course_id: 1, title: "关于将 project（专案） 上传（deploy）到 Heroku 时遇到的问题", description: "将专案上传到 Heroku 时要注意几点：\r\n\r\n1. 免费的用户在 Heroku 上只能建 5 个app。如果都 5 个都用完了，建议到 Heroku 上把不需要的 app 删了。这样就又可以继续 `heroku create`\r\n2. 跟着教程做的时候，第一次 push（推）到 heroku 主机（maste）上时并不会成功，会出现提示没有安装 splite3 。解决方法请参考教程。\r\n3. 一定要跟着教程的步骤一步一步的做。如果觉得陌生可以多操作几遍。"])
puts "3rd Faq in 1st Course created."

Faq.create([course_id: 1, title: "解决 bug 的步骤", description: "如果出错报错。请确认你的 code 有没有写错，可以把课件里的代码复制、粘贴到相应位置，保存，运行看是否还出现错误提示。\r\n\r\n请注意确保输入这些的时候是“英文、半角”的状态。\r\n\r\n如果还是报错，欢迎到[提问区](https://github.com/hackschoolcn/hackschool/issues)，提出您的问题。我们会保证在12小时内回复。"])
puts "4th Faq in 1st Course created."


# Create Questions

for i in 1..10 do
  Question.create!([course_id: 1, title: "Admin Question no.#{i}", description: "这是用seed建立的第 #{i} 个问题", user_id: 1])
end
puts "10 Questions created by admin."
